{
    "pipes": [
        {
            "name": "ObjectArrayToStringPipe",
            "id": "pipe-ObjectArrayToStringPipe-85685490a0bcb002f1767238f17bca46aa1323600c1bda6dbbe39e3c760901a6770102d927b92db80b9d49164e5b54d8b7f253f349e0a85a1525be48d468f6de",
            "file": "src/app/pipes/object-array-to-string.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fields",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "objects",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fields",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "objetArrayToString",
            "sourceCode": "import {\n  Pipe,\n  PipeTransform\n} from '@angular/core';\n\n@Pipe({\n  name: 'objetArrayToString'\n})\nexport class ObjectArrayToStringPipe implements PipeTransform {\n  transform(objects: any[], fields: string[]): string[] {\n    const response = [''];\n    objects.forEach(object => {\n      fields.forEach(field => {\n        const element = object[field];\n\n        response.push(element);\n      });\n    });\n    return response;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "DecodedToken",
            "id": "interface-DecodedToken-68c2994a0066454fd54d7d6615db3f9814feaa6b735118264cac81b29b443d9f884c26d0ef368e7cd6fad05e9c3dc7c1ca2545ec605f6cbd956157e9bb4347ff",
            "file": "src/app/interfaces/login.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\n  login: string;\n  password: string;\n  projectId: string;\n}\nexport interface LoginResponse {\n  token: string;\n  refreshToken: string;\n}\nexport interface DecodedToken {\n  sub: string;\n  iat: string;\n}\n",
            "properties": [
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-3d47cb275ef3583562153419d4358e50c9e042c377daa0873038fd06f6b7028066a1cb1df071c588f1c75211deaaeed053b89886fa86e5bf67db585dedc77f21",
            "file": "src/app/components/logout-confirmation-dialog/logout-confirmation-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component, Inject\n} from '@angular/core';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nexport interface DialogData {\n  isToLogout: boolean;\n}\n@Component({\n  selector: 'app-logout-confirmation-dialog',\n  templateUrl: './logout-confirmation-dialog.component.html',\n  styleUrls: ['./logout-confirmation-dialog.component.sass']\n}) \nexport class LogoutConfirmationDialogComponent {\n  isToLogout: boolean = true;\n  constructor(\n    public logoutConfirmationDialogDialogRef: MatDialogRef <LogoutConfirmationDialogComponent>, \n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {\n    \n  };\n  \n  logoutConfirmationDialogOnNoClick(): void {\n    this.logoutConfirmationDialogDialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "isToLogout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Food",
            "id": "interface-Food-2a975c83688dced55be4626485c4727ee07266250793bfcc058ae6deb083540d1e9bc61ced735704573eaeb35c46ea9d62f5aa54bd4c7acc1050b1b53902a272",
            "file": "src/app/components/lopinho-select/lopinho-select.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\ninterface Food {\n  value: string;\n  viewValue: string;\n}\n\n@Component({\n  selector: 'lopinho-select',\n  templateUrl: './lopinho-select.component.html',\n  styleUrls: ['./lopinho-select.component.sass']\n})\nexport class LopinhoSelectComponent implements OnInit {\n  label = 'Select label';\n\n  foods: Food[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'},\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "viewValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Login",
            "id": "interface-Login-68c2994a0066454fd54d7d6615db3f9814feaa6b735118264cac81b29b443d9f884c26d0ef368e7cd6fad05e9c3dc7c1ca2545ec605f6cbd956157e9bb4347ff",
            "file": "src/app/interfaces/login.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\n  login: string;\n  password: string;\n  projectId: string;\n}\nexport interface LoginResponse {\n  token: string;\n  refreshToken: string;\n}\nexport interface DecodedToken {\n  sub: string;\n  iat: string;\n}\n",
            "properties": [
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginResponse",
            "id": "interface-LoginResponse-68c2994a0066454fd54d7d6615db3f9814feaa6b735118264cac81b29b443d9f884c26d0ef368e7cd6fad05e9c3dc7c1ca2545ec605f6cbd956157e9bb4347ff",
            "file": "src/app/interfaces/login.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\n  login: string;\n  password: string;\n  projectId: string;\n}\nexport interface LoginResponse {\n  token: string;\n  refreshToken: string;\n}\nexport interface DecodedToken {\n  sub: string;\n  iat: string;\n}\n",
            "properties": [
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RemoveConfirmationDialogDialogData",
            "id": "interface-RemoveConfirmationDialogDialogData-0ca8a88053a04fbecfea5ee9326b9bcec079af605c4407e67bb1fc7b32e8eb33623ad22dcb6cf1d288296f9b6d6c4b6faf1877cf4c63c051956fa48cbe86c013",
            "file": "src/app/components/remove-confirmation-dialog/remove-confirmation-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  Component, Inject\n} from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  Validators\n} from '@angular/forms';\nimport {\n  ActivatedRoute,\n  Router\n} from '@angular/router';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nexport interface RemoveConfirmationDialogDialogData {\n    teste: string,\n    teste2: string,\n}\n@Component({\n  selector: 'app-remove-confirmation-dialog',\n  templateUrl: './remove-confirmation-dialog.component.html',\n  styleUrls: ['./remove-confirmation-dialog.component.sass']\n}) export class RemoveConfirmationDialogComponent {\n  id: string = this.removeConfirmationDialogRoute.snapshot.params['id'];\n  isAddModule: boolean = !this.id;\n  constructor(\n    private removeConfirmationDialogFormBuilder: FormBuilder, \n    private removeConfirmationDialogRoute: ActivatedRoute, \n    private removeConfirmationDialogRouter: Router, \n    public removeConfirmationDialogDialogRef: MatDialogRef<RemoveConfirmationDialogComponent>, \n    @Inject(MAT_DIALOG_DATA) public data: RemoveConfirmationDialogDialogData) {\n    this.setForm();\n  };\n  removeConfirmationDialogForm = this.removeConfirmationDialogFormBuilder.group({});\n  setForm = () => {\n    if (!this.isAddModule) {\n      /** TO-DO */ /** Service this.userService.getById(this.id).pipe(first()).subscribe(x => this.form.patchValue(x));*/\n    }\n  }\n  removeConfirmationDialogSubmit = () => {\n    fetch('$ENV$/acl', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      body: JSON.stringify(this.removeConfirmationDialogForm.value),\n    }).then((data) => {\n      data.json().then((keys) => {})\n    });\n  }\n  RemoveConfirmationDialogOnNoClick(): void {\n    this.removeConfirmationDialogDialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "teste",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "teste2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-75a15c62deea8d4b305067207af528e1b7a932c8e1c41e4c8d86cfacab3881988cdfad1b17ba54a638e63bf0ab54feb044f7091311a145d436ac95021b5b0e34-1",
            "file": "src/app/interfaces/user.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  _id: string;\n  email: string;\n  type: any;\n  personInfo: string;\n  acl: any;\n  verified: boolean;\n}",
            "properties": [
                {
                    "name": "_id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "acl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "personInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "verified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-49086aada280b0e880b0894302907881aa5ef43856f5de939d26680941ea519c3c7c8434d5b0ea8404b37081b41cb56a3458d54abd6dcb6217528fd77928e1fc",
            "file": "src/app/components/login/auth.service.ts",
            "properties": [
                {
                    "name": "BASEURL",
                    "defaultValue": "environment.baseUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void | LoginResponse>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "Login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "recoveryDataFromLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "requestPassword",
                    "args": [
                        {
                            "name": "login",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "login",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserAndTokenLocalStorage",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nimport { Login, LoginResponse } from '../../interfaces/login.interface';\nimport { User } from '../../interfaces/user.interface';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  BASEURL = environment.baseUrl;\n  user = new BehaviorSubject<User | null>(null);\n\n  constructor(\n    public http: HttpClient,\n    private router: Router\n  ) {\n    this.recoveryDataFromLocalStorage();\n  }\n\n  private recoveryDataFromLocalStorage(): void {\n    const data: string | null = localStorage.getItem('user_data');\n    if (!data) {\n      return;\n    }\n    this.user.next(JSON.parse(data));\n  }\n\n  private async setUserAndTokenLocalStorage(token: string): Promise<void> {\n    localStorage.setItem('token', token);\n    await this.http\n      .post<User>(`${this.BASEURL}/auth/get-user/${token}`, {projectId: environment.projectId})\n      .toPromise()\n      .then((user) => {\n        this.user.next(user);\n        localStorage.setItem('user_data', JSON.stringify(user));\n        void this.router.navigate(['/main']);\n      });\n  }\n\n  async login(login: Login): Promise<void | LoginResponse> {\n    return this.http\n      .post(`${this.BASEURL}/auth/login`, login)\n      .toPromise()\n      .then((res) => {\n        const { token } = res as LoginResponse;\n        const userAndTokenLocalStorage = \n        this.setUserAndTokenLocalStorage(token);\n      });\n  }\n\n  async requestPassword(login: { email: string }): Promise<any> {\n    return this.http\n      .post(`${this.BASEURL}/auth/request-password`, login)\n      .toPromise();\n  }\n\n  logout(): void {\n    this.user.next(null);\n    localStorage.clear();\n    void this.router.navigate(['/']);\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileFormService",
            "id": "injectable-ProfileFormService-0697764a27ffceb4eec7905537c8f0994c557cdcb4e5ced1dffbc4f76f3521d5545a582abb345378963c1106e4807325cfaaa2893960c5fec27e442ea83a44f7",
            "file": "src/app/components/profile/profile.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "'localhost:3000'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "find",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "body",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  HttpClient\n} from '@angular/common/http';\nimport {\n  Injectable\n} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProfileFormService {\n  BASE_URL = 'localhost:3000';\n  constructor(private _httpClient: HttpClient) {}\n\n  delete(id: number) {\n    return this._httpClient.delete(`${this.BASE_URL}/people/${id}`).toPromise();\n  }\n\n  save(body: any) {\n    return this._httpClient.post(`${this.BASE_URL}/people`, body).toPromise();\n  }\n\n  update(body: any, id: number) {\n    return this._httpClient.put(`${this.BASE_URL}/people/${id}`, body).toPromise();\n  }\n\n  find(id: string) {\n    return this._httpClient.get(`${this.BASE_URL}/people/${id}`).toPromise();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_httpClient",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-cd6eee25a2ce2f7250f4d94016574a5c1979847b29f6bc76b65f57bb8b042626508f47f3f0bc35846cb4203e11c15e2fce5ae63933d5994ddd3dfe028f1b8209",
            "file": "src/app/guards/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '../components/login/auth.service';\n\n@Injectable()\nexport class AuthenticationGuard implements CanActivate {\n  constructor(private auth: AuthService, private router: Router) {}\n\n  canActivate(): boolean {\n    if (!this.auth.user.value) {\n      void this.router.navigate(['/']);\n      console.warn('You must authenticate to login');\n      return false;\n    }\n    return true;\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "MyErrorHandler",
            "id": "class-MyErrorHandler-8e3eec7dedab4b98096ca7be820fa20c6c617e878fc1bd8beab13b7086a37701084858a5638d077e67f964bd95146c7ee0e764b8dd63f86e1c6ec54076c13005",
            "file": "src/utils/error-handler.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class MyErrorHandler {\n    validatorError = (error: any): string => {\n        if (error?.required) return 'Campo obrigatório';\n        if (error?.email) return 'Formato de e-mail inválido';\n        if (error?.minlength) return 'Tamanho mínimo não alcançado';\n\n        return 'Erro não definido';\n    }\n\n    apiErrorMessage = (errorMessage: string) => {\n        switch (errorMessage) {\n            case 'Error: Incorrect password':\n                return 'Senha incorreta.'\n                break;\n            case 'Error: User not found':\n                return 'Usuário não encontrado.'\n                break;\n\n            case 'Project does not have authorization':\n                return 'Sem autorização para este aplicativo.'\n                break;\n        \n            default:\n                return errorMessage;\n                break;\n        }\n    }\n}",
            "properties": [
                {
                    "name": "apiErrorMessage",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "validatorError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3753d94ce7cd8397c5b83a5c9503ae497b71bcb5f362bedfb16ee76971c8df045426156b6f84394a7205eefb6365e66e9d900972cf171704d613b9f441016127",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'lopes-quickstart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  title = 'lopes-quickstart';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-b68bdb2d51611dcde0dda27caba2c3c56576f8d5aba49e3bf9362062157dea766d03da7be019b6fee1bc460b219655d1ab0352b6fecbb2b5b2aa01b39e3e638b",
            "file": "src/app/modules/auth/auth.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth",
            "styleUrls": [
                "./auth.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.sass']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./auth.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\n    <span>Lopes Quickstart</span>\n    <span class=\"example-spacer\"></span>\n    \n</mat-toolbar>\n<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ChangePasswordComponent",
            "id": "component-ChangePasswordComponent-6721644cc6e42d55f1b89f608be4a60ada795778d209738cfd76f644083c335ce64e892bbde4346f990a222ba92a2add8828f25b69b605868fa37a2c0df048c8",
            "file": "src/app/components/change-password/change-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-change-password",
            "styleUrls": [
                "./change-password.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./change-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "changePasswordForm",
                    "defaultValue": "new FormGroup({\n    'password': new FormControl(null, [Validators.required]),\n    'repeatPassword': new FormControl(null, [Validators.required])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "changePasswordSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component\n} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  Validators\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.sass']\n})\nexport class ChangePasswordComponent {\n  changePasswordForm = new FormGroup({\n    'password': new FormControl(null, [Validators.required]),\n    'repeatPassword': new FormControl(null, [Validators.required])\n  });\n  changePasswordSubmit = () => {\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card\n    width: 300px\n\n.header-image\n    background-image: url('../../../assets/img/logo-m.png')\n    background-size: cover\n",
                    "styleUrl": "./change-password.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"centralized\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"header-image\"></div>\n    <mat-card-title>Mudar senha</mat-card-title>\n    <mat-card-subtitle>Defina nova senha.</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <form id=\"changePassword\" [formGroup]=\"changePasswordForm\" (ngSubmit)=\"changePasswordSubmit()\" class=\"flex-column\">\n      <mat-form-field>\n        <mat-label>Senha</mat-label><input matInput type=\"password\" formControlName=\"password\" id=\"password\"\n          placeholder=\"Mínimo de 8 caracteres\" required ngModel autocomplete=\"new-password\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Repetir senha</mat-label><input matInput type=\"password\" formControlName=\"repeatPassword\"\n          id=\"repeatPassword\" placeholder=\"Repita sua nova senha\" required ngModel autocomplete=\"new-password\">\n      </mat-form-field><button mat-raised-button color=\"primary\" [routerLink]=\"['/login']\"\n        routerLinkActive=\"router-link-active\">ALTERAR</button>\n    </form>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button [routerLink]=\"['/']\" routerLinkActive=\"router-link-active\">Login</button>\n  </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-6d94905632bead1ee6bbe077adffca9a185ae9787e227460bdb3aefdb507e63679409ce23c99c9e787d3743fa9370d5dde8ab73dee2cee9e16ee52b92650b4b1",
            "file": "src/app/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.sass']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"centralized\">\n    <mat-card-header class=\"text-centralized\">\n        <mat-card-title>\n            Sistema Lopes Quickstart\n        </mat-card-title>\n        <mat-card-subtitle>\n            Bem vindo a ferramenta administrativa do Lopes Quickstart. Utilize o menu para gerenciar sua conta e realizar ações.\n        </mat-card-subtitle>\n    </mat-card-header>\n</mat-card>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0cd94fbc94a83702e45bf987cb3b3f9074d69cd27e6ca2e4fbac0dc5b5047bd4dc3a9ce8a77f6bd9ab7ae3e6ca8e49b34bed529ca0da0fa428fec544a0324870",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-56436de3ae0bd1d6d8be9fe0db585119cb7b2053e6df61b06b37370d7d0a4de8c09bd662c0d067d73a08e4e6ead9acf95385dac738e214554d1c36ceaa636935",
            "file": "src/app/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorHandler",
                    "defaultValue": "new MyErrorHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loginForm",
                    "defaultValue": "this.loginFormBuilder.group({\n    'user': [null, [Validators.required, Validators.email]],\n    'password': [null, [Validators.required, Validators.minLength(6)]],\n    'projectId': environment.projectId\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "loginSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component\n} from '@angular/core';\nimport {\n  FormBuilder,\n  Validators\n} from '@angular/forms';\nimport { AuthService } from './auth.service';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { environment } from '../../../environments/environment';\n\nimport { MyErrorHandler } from 'src/utils/error-handler';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.sass']\n}) \n\nexport class LoginComponent {\n  errorHandler = new MyErrorHandler;\n  loading: boolean = false;\n\n  constructor (\n    private loginFormBuilder: FormBuilder, \n    private authService: AuthService,\n    private _snackbar: MatSnackBar\n  ) {}\n\n  loginForm = this.loginFormBuilder.group({\n    'user': [null, [Validators.required, Validators.email]],\n    'password': [null, [Validators.required, Validators.minLength(6)]],\n    'projectId': environment.projectId\n  });\n\n\n  loginSubmit = (): void => {\n    this.loading = true;\n    this.authService.login(this.loginForm.value)\n    .catch(err => {\n      this.loading = false;\n      const message = this.errorHandler.apiErrorMessage(err.error.error.message);\n      this._snackbar.open(message, undefined, {\n        duration: 4 * 1000,\n      });\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card\n    width: 300px\n\n.header-image\n    background-image: url('../../../assets/img/logo-m.png')\n    background-size: cover\n",
                    "styleUrl": "./login.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginFormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "loginFormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_snackbar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-card class=\"centralized\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"header-image\"></div>\n    <mat-card-title>Login</mat-card-title>\n    <mat-card-subtitle>Autenticação de usuário.</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <form id=\"login\" [formGroup]=\"loginForm\" (ngSubmit)=\"loginSubmit()\" class=\"flex-column\">\n      <mat-form-field>\n        <mat-label>Usuário</mat-label>\n        <input matInput type=\"text\" formControlName=\"user\" id=\"user\" placeholder=\"Sua identidade, nome de usuário ou e-mail\" required autocomplete=\"new-password\">\n        <mat-error>{{errorHandler.validatorError(loginForm.controls['user'].errors)}}</mat-error> \n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Senha</mat-label>\n        <input matInput type=\"password\" formControlName=\"password\" id=\"password\" placeholder=\"Digite sua senha\" required autocomplete=\"new-password\">\n        <mat-error>{{errorHandler.validatorError(loginForm.controls['password'].errors)}}</mat-error> \n      </mat-form-field>\n      \n      <button mat-raised-button color=\"primary\" [disabled]=\"!loginForm.valid || loading\">\n        ENTRAR\n      </button>\n    </form>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button [routerLink]=\"['/recover-password']\" routerLinkActive=\"router-link-active\">\n      Esqueci minha senha\n    </button>\n  </mat-card-actions>\n</mat-card>"
        },
        {
            "name": "LogoutConfirmationDialogComponent",
            "id": "component-LogoutConfirmationDialogComponent-3d47cb275ef3583562153419d4358e50c9e042c377daa0873038fd06f6b7028066a1cb1df071c588f1c75211deaaeed053b89886fa86e5bf67db585dedc77f21",
            "file": "src/app/components/logout-confirmation-dialog/logout-confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logout-confirmation-dialog",
            "styleUrls": [
                "./logout-confirmation-dialog.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./logout-confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogData",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isToLogout",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "logoutConfirmationDialogDialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<LogoutConfirmationDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "logoutConfirmationDialogOnNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component, Inject\n} from '@angular/core';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nexport interface DialogData {\n  isToLogout: boolean;\n}\n@Component({\n  selector: 'app-logout-confirmation-dialog',\n  templateUrl: './logout-confirmation-dialog.component.html',\n  styleUrls: ['./logout-confirmation-dialog.component.sass']\n}) \nexport class LogoutConfirmationDialogComponent {\n  isToLogout: boolean = true;\n  constructor(\n    public logoutConfirmationDialogDialogRef: MatDialogRef <LogoutConfirmationDialogComponent>, \n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {\n    \n  };\n  \n  logoutConfirmationDialogOnNoClick(): void {\n    this.logoutConfirmationDialogDialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./logout-confirmation-dialog.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logoutConfirmationDialogDialogRef",
                        "type": "MatDialogRef<LogoutConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "logoutConfirmationDialogDialogRef",
                        "type": "MatDialogRef<LogoutConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "DialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>Deseja realmente sair?</h1>\n<div mat-dialog-content></div>\n<div mat-dialog-actions>\n    <button mat-raised-button color=\"warn\" [mat-dialog-close]=\"data.isToLogout\" cdkFocusInitial>CONFIRMAR</button>\n    <button mat-raised-button (click)=\"logoutConfirmationDialogOnNoClick()\">CANCELAR</button>\n</div>\n"
        },
        {
            "name": "LopinhoAutocompleteComponent",
            "id": "component-LopinhoAutocompleteComponent-6a7223a2068e5cb2f64d3262b04fe20654b9353a93b4edb62e48bb6c2d88dee47ee3b853b92946abb837943bb48e524d9064b32e80fb93f400d750b794883608",
            "file": "src/app/components/lopinho-autocomplete/lopinho-autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lopinho-autocomplete",
            "styleUrls": [
                "./lopinho-autocomplete.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./lopinho-autocomplete.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "myControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "options",
                    "defaultValue": "['One', 'Two', 'Three']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Autocomplete placeholder'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "defaultValue": "'Autocomplete label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\n@Component({\n  selector: 'lopinho-autocomplete',\n  templateUrl: './lopinho-autocomplete.component.html',\n  styleUrls: ['./lopinho-autocomplete.component.sass']\n})\nexport class LopinhoAutocompleteComponent implements OnInit {\n\n  text = 'Autocomplete label';\n  placeholder = 'Autocomplete placeholder'\n  myControl = new FormControl();\n  options: string[] = ['One', 'Two', 'Three'];\n  filteredOptions: Observable<string[]>;\n\n  constructor() {\n    this.filteredOptions = this.myControl.valueChanges.pipe(\n      startWith(''),\n      map(value => this._filter(value)),\n    );\n  }\n\n  ngOnInit(): void {  \n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lopinho-autocomplete.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field  appearance=\"outline\">\n  <mat-label>{{text}}</mat-label>\n  <input type=\"text\" [placeholder]=\"placeholder\" aria-label=\"Number\" matInput [formControl]=\"myControl\"\n    [matAutocomplete]=\"auto\">\n  <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\n    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\n      {{option}}\n    </mat-option>\n  </mat-autocomplete>\n</mat-form-field>\n"
        },
        {
            "name": "LopinhoButtonComponent",
            "id": "component-LopinhoButtonComponent-f214c1d616600918bff780ca747b9e2d3ad6a60bb619d704f238f7e7418adf34c8b2d29c7b94e5068d51e97fbcddbca6686f2427a9e4fc0846018dc957269f1f",
            "file": "src/app/components/lopinho-button/lopinho-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lopinho-button",
            "styleUrls": [
                "./lopinho-button.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./lopinho-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"primary\" | \"accent\" | \"warn\" | undefined",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output\n} from '@angular/core';\n\n@Component({\n  selector: 'lopinho-button',\n  templateUrl: './lopinho-button.component.html',\n  styleUrls: ['./lopinho-button.component.sass'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LopinhoButtonComponent {\n\n  @Input() color: 'primary' | 'accent' | 'warn' | undefined;\n  @Input() label = 'Button';\n  @Output() buttonClick = new EventEmitter();\n\n  constructor() {\n\n  }\n\n  onClick() {\n    this.buttonClick.emit();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lopinho-button.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "templateData": "<button mat-raised-button>\n    {{ label }}\n</button>"
        },
        {
            "name": "LopinhoCheckboxComponent",
            "id": "component-LopinhoCheckboxComponent-bbab09cc3e1ec3e3df726330fd87cce629ecf160371dce24e1957bd914c830d806f9c98977e40814984da1c2836061a3a1ce036537a05b0f857808b9c69ab960",
            "file": "src/app/components/lopinho-checkbox/lopinho-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lopinho-checkbox",
            "styleUrls": [
                "./lopinho-checkbox.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./lopinho-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label",
                    "defaultValue": "'Check me!'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lopinho-checkbox',\n  templateUrl: './lopinho-checkbox.component.html',\n  styleUrls: ['./lopinho-checkbox.component.sass']\n})\nexport class LopinhoCheckboxComponent implements OnInit {\n\n  label = 'Check me!';\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lopinho-checkbox.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-checkbox class=\"example-margin\">{{label}}</mat-checkbox>"
        },
        {
            "name": "LopinhoDatepickerComponent",
            "id": "component-LopinhoDatepickerComponent-1933d5cd9c5f3cba4329442b0fccfd16e162255a19a1415dfec1ee1f6b090a0b3cf71e44b114fcdd9c29d5012e52e36372ccc77ee3c8196a21ec5b73ebd8ec9b",
            "file": "src/app/components/lopinho-datepicker/lopinho-datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lopinho-datepicker",
            "styleUrls": [
                "./lopinho-datepicker.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./lopinho-datepicker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label",
                    "defaultValue": "'Escolha uma data'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lopinho-datepicker',\n  templateUrl: './lopinho-datepicker.component.html',\n  styleUrls: ['./lopinho-datepicker.component.sass']\n})\nexport class LopinhoDatepickerComponent implements OnInit {\n\n  label = 'Escolha uma data';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lopinho-datepicker.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\">\n    <mat-label>{{label}}</mat-label>\n    <input matInput [matDatepicker]=\"picker\">\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n    <mat-datepicker #picker></mat-datepicker>\n</mat-form-field>"
        },
        {
            "name": "LopinhoFormComponent",
            "id": "component-LopinhoFormComponent-66d9114eade6cd2c541614638aae96ba4f107b03d74cfd3e977fd28f76277f3d0e6016f3ebf350a639654d616edb27af3958007e154d66335c1125f896d9e49a",
            "file": "src/app/components/lopinho-form/lopinho-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lopinho-form",
            "styleUrls": [
                "./lopinho-form.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./lopinho-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "label",
                    "defaultValue": "'Input label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'Input placeholder'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lopinho-form',\n  templateUrl: './lopinho-form.component.html',\n  styleUrls: ['./lopinho-form.component.sass']\n})\nexport class LopinhoFormComponent implements OnInit {\n\n  label = 'Input label';\n  placeholder = 'Input placeholder';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lopinho-form.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\">\n    <mat-label>{{label}}</mat-label>\n    <input matInput [placeholder]='placeholder'>\n</mat-form-field>"
        },
        {
            "name": "LopinhoSelectComponent",
            "id": "component-LopinhoSelectComponent-2a975c83688dced55be4626485c4727ee07266250793bfcc058ae6deb083540d1e9bc61ced735704573eaeb35c46ea9d62f5aa54bd4c7acc1050b1b53902a272",
            "file": "src/app/components/lopinho-select/lopinho-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lopinho-select",
            "styleUrls": [
                "./lopinho-select.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./lopinho-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "foods",
                    "defaultValue": "[\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'},\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Food[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "label",
                    "defaultValue": "'Select label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\ninterface Food {\n  value: string;\n  viewValue: string;\n}\n\n@Component({\n  selector: 'lopinho-select',\n  templateUrl: './lopinho-select.component.html',\n  styleUrls: ['./lopinho-select.component.sass']\n})\nexport class LopinhoSelectComponent implements OnInit {\n  label = 'Select label';\n\n  foods: Food[] = [\n    {value: 'steak-0', viewValue: 'Steak'},\n    {value: 'pizza-1', viewValue: 'Pizza'},\n    {value: 'tacos-2', viewValue: 'Tacos'},\n  ];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./lopinho-select.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field appearance=\"outline\">\n  <mat-label>{{label}}</mat-label>\n  <mat-select>\n    <mat-option *ngFor=\"let food of foods\" [value]=\"food.value\">\n      {{food.viewValue}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>"
        },
        {
            "name": "MainComponent",
            "id": "component-MainComponent-256807077bfaefcf65ec41ed4ff1a1cd7a7d3cf97f90160c8c2af2bbd5d367315ab95731231f5fa95bff18e1419d99fce65d850d307d32cb1c1086a09fe3d746",
            "file": "src/app/modules/main/main.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main",
            "styleUrls": [
                "./main.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./main.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isMenuOpened",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isToLogout",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "logout",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "logoutOpenDialog",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "menu",
                    "defaultValue": "[\n    {\n      router: '/main/dashboard',\n      title: 'Página inicial',\n      icon: 'dashboard',\n      itens: [],\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "userData",
                    "defaultValue": "localStorage.getItem('user_data')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userDataObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "userType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit\n} from '@angular/core';\nimport {\n  MatDialog\n} from '@angular/material/dialog';\nimport {\n  AuthService\n} from 'src/app/components/login/auth.service';\nimport {\n  LogoutConfirmationDialogComponent\n} from 'src/app/components/logout-confirmation-dialog/logout-confirmation-dialog.component';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.sass']\n})\nexport class MainComponent implements OnInit {\n  userData = localStorage.getItem('user_data');\n  userDataObject;\n  userType;\n  menu = [\n    {\n      router: '/main/dashboard',\n      title: 'Página inicial',\n      icon: 'dashboard',\n      itens: [],\n    }\n  ];\n\n  isMenuOpened = true;\n\n  isToLogout: boolean = true;\n\n  constructor(\n    private logoutDialog: MatDialog,\n    private authService: AuthService\n  ) {\n    if (this.userData) {\n      this.userDataObject = JSON.parse(this.userData);\n      this.userType = this.userDataObject.type;\n    }\n  };\n\n  ngOnInit(): void {}\n\n  logoutOpenDialog = (): void => {\n    const logoutDialogRef = this.logoutDialog.open(\n      LogoutConfirmationDialogComponent, {\n        data: {\n          isToLogout: this.isToLogout,\n        }\n      }\n    );\n\n    logoutDialogRef.afterClosed().subscribe(res => {\n      if (res) this.logout();\n    })\n  }\n\n  logout = () => {\n    this.authService.logout();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .mat-toolbar\n  z-index: 998\n  position: fixed\n\na\n  text-decoration: none\n  color: #000000\n\n.spacer\n  flex: 1 1 auto\n\n.container\n  position: absolute\n  width: 100%\n  height: 100%\n  border: 0\n\n.container-content\n  margin-top: 64px\n  width: 100%\n  height: 90%\n  border: 0\n\n.menu\n  border-bottom: #cacaca solid 1px\n  padding: 10px 0 10px 0\n\n.menu a:hover\n  color: #cacaca\n\n.menu-item\n  margin: 0 10px 0 10px\n\n.menu-item mat-icon\n  padding-right: 10px\n\n.menu-active\n  color: #3a57b7\n\n.submenu\n  flex-basis: 100%\n  height: inherit\n  font-size: 12px\n  margin-left: 10px\n\n.submenu .mat-icon\n  font-size: 18px\n  padding: 1px\n\n\n.sidenav-content\n  position: fixed\n  margin-top: 64px\n  display: flex\n  height: 100%\n  align-items: center\n  justify-content: center",
                    "styleUrl": "./main.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logoutDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "logoutDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar color=\"primary\">\n  <button mat-icon-button class=\"icon\" aria-label=\"Example icon-button with menu icon\" (click)=\"drawer.toggle()\">\n    <mat-icon>menu</mat-icon>\n  </button>\n  <span>Lopes Quickstart</span>\n  <span class=\"spacer\"></span>\n  <button mat-icon-button class=\"icon\" aria-label=\"Perfil\" [matMenuTriggerFor]=\"profileMenu\">\n    <mat-icon>account_circle</mat-icon>\n  </button>\n</mat-toolbar>\n\n<mat-drawer-container class=\"container\">\n  <mat-drawer #drawer class=\"sidenav-content\" mode=\"side\">\n    <div class=\"menu\" *ngFor=\"let item of menu\">\n      <a [routerLink]=\"item.router\" [routerLinkActive]=\"['menu-active']\" class=\"flex-row menu-item\">\n        <div>\n          <mat-icon>{{item.icon}}</mat-icon>\n        </div>\n        <div>\n          {{item.title}}\n        </div>\n      </a>\n      <div *ngIf=\"item.itens.length > 0\" class=\"submenu\">\n        {{item.itens.length > 0}}\n        <div *ngFor=\"let i of item.itens\">\n          <!-- <a [routerLink]=\"i.router\" [routerLinkActive]=\"['menu-active']\" class=\"flex-row menu-item\">\n                          <div>\n                              <mat-icon>{{i.icon}}</mat-icon>\n                          </div>\n                          <div>\n                              {{i.title}}\n                          </div>\n                      </a> -->\n        </div>\n      </div>\n    </div>\n  </mat-drawer>\n\n  <div class=\"container-content\">\n    <router-outlet></router-outlet>\n  </div>\n</mat-drawer-container>\n\n<mat-menu #profileMenu=\"matMenu\">\n  <button mat-menu-item [routerLink]=\"['/main/profile']\" *ngIf=\"userType === 'person'\">\n    <mat-icon>person</mat-icon>\n    <span>Alterar dados pessoais</span>\n  </button>\n\n  <button mat-menu-item [routerLink]=\"['/main/profile']\" *ngIf=\"userType === 'company'\">\n    <mat-icon>business</mat-icon>\n    <span>Alterar dados da empresa</span>\n  </button>\n\n  <button mat-menu-item [routerLink]=\"['/main/change-password']\">\n    <mat-icon>lock</mat-icon>\n    <span>Alterar senha</span>\n  </button>\n\n  <!-- <button mat-menu-item [routerLink]=\"['/']\" routerLinkActive=\"router-link-active\"> -->\n  <button mat-menu-item (click)=\"logoutOpenDialog()\">\n    <mat-icon>logout</mat-icon>\n    <span>Sair</span>\n  </button>\n</mat-menu>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-432c9ae0bcf6e2e1f46701f7565a67376cb10145b7d049c5fe930cf8f075c6e02e24151589750b18cbaa8266f7c61393b95c4d833fbfd71ee228904aa014349f",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-92578ef49eaf1fed06278d7812e8a856c3f224b606e183ae5d234d06f41c2e35407338fb35da814f053bd30f0e48449d3b3b2eb484c55d0798e3cfd87440df6d",
            "file": "src/app/components/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [
                "./profile.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "birthday",
                    "defaultValue": "new Date((new Date().getTime() - 3888000000))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "contactTypeSelectObject",
                    "defaultValue": "[{\n    value: 'mobile',\n    valueView: 'Celular'\n  }, {\n    value: 'email',\n    valueView: 'E-mail'\n  }, {\n    value: 'phone',\n    valueView: 'Telefone convencional'\n  }, {\n    value: 'socialMedia',\n    valueView: 'Rede social'\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "genderSelectObject",
                    "defaultValue": "[{\n    value: 'F',\n    valueView: 'Feminino'\n  }, {\n    value: 'M',\n    valueView: 'Masculino'\n  }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "profileForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "profileSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "addAddresses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addContacts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "newAddresses",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "newContacts",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeAddresses",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeContacts",
                    "args": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { DatePipe } from '@angular/common';\nimport {\n  Component\n} from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  Validators\n} from '@angular/forms';\nimport {\n  ActivatedRoute,\n  Router\n} from '@angular/router';\nimport { ProfileFormService } from './profile.service';\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.sass']\n}) export class ProfileComponent {\n  profile;\n  profileForm;\n  birthday = new Date((new Date().getTime() - 3888000000));\n  constructor(\n    private profileFormBuilder: FormBuilder,\n    private profileRoute: ActivatedRoute,\n    private _profileFormService: ProfileFormService\n  ) {\n    const userData = localStorage.getItem('user_data');\n    const pipe = new DatePipe('en-US');\n    if (userData) {\n      const object = JSON.parse(userData);\n      this.profile = object.personInfo;\n    }\n    \n    this.profileForm = this.profileFormBuilder.group({\n      uniqueId: [{ value: this.profile.uniqueId, disabled: true }, [Validators.required]],\n      name: [{ value: this.profile.name, disabled: true }, [Validators.required]],\n      birthday: [{ value: new Date(this.profile.birthday), disabled: true }, [Validators.required]],\n      gender: [{ value: this.profile.gender, disabled: true }, []],\n      contacts: this.profileFormBuilder.array([]),\n      addresses: this.profileFormBuilder.array([]),\n    });\n  };\n  genderSelectObject = [{\n    value: 'F',\n    valueView: 'Feminino'\n  }, {\n    value: 'M',\n    valueView: 'Masculino'\n  }];\n  contactTypeSelectObject = [{\n    value: 'mobile',\n    valueView: 'Celular'\n  }, {\n    value: 'email',\n    valueView: 'E-mail'\n  }, {\n    value: 'phone',\n    valueView: 'Telefone convencional'\n  }, {\n    value: 'socialMedia',\n    valueView: 'Rede social'\n  }];\n\n  newContacts(): FormGroup {\n    return this.profileFormBuilder.group({\n      contactId: [null, [Validators.required,]],\n      contactType: [null, []],\n      value: [null, [Validators.required,]],\n      contactComplement: [null, [Validators.required,]],\n    })\n  };\n  newAddresses(): FormGroup {\n    return this.profileFormBuilder.group({\n      postalCode: [null, [Validators.required,]],\n      addressId: [null, [Validators.required,]],\n      address: [null, [Validators.required,]],\n      number: [null, [Validators.required,]],\n      district: [null, [Validators.required,]],\n      addressComplement: [null, []],\n      country: [null, []],\n      state: [null, []],\n      city: [null, []],\n    })\n  };\n  addContacts() {\n    this.contacts.push(this.newContacts())\n  }\n  addAddresses() {\n    this.addresses.push(this.newAddresses())\n  }\n  get contacts(): FormArray {\n    return this.profileForm.get('contacts') as FormArray\n  };\n  get addresses(): FormArray {\n    return this.profileForm.get('addresses') as FormArray\n  };\n  removeContacts(i: number) {\n    this.contacts.removeAt(i)\n  }\n  removeAddresses(i: number) {\n    this.addresses.removeAt(i)\n  }\n  profileSubmit = () => {\n    this._profileFormService.save(this.profileForm).then((res) => {\n\n    }).catch((err) => console.log(err));\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./profile.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "profileFormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "profileRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_profileFormService",
                        "type": "ProfileFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "profileFormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "profileRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_profileFormService",
                        "type": "ProfileFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "contacts": {
                    "name": "contacts",
                    "getSignature": {
                        "name": "contacts",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 93
                    }
                },
                "addresses": {
                    "name": "addresses",
                    "getSignature": {
                        "name": "addresses",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 96
                    }
                }
            },
            "templateData": "<mat-card>\n  <mat-card-content>\n    <mat-tab-group>\n      <mat-tab label=\"Dados pessoais\" id=\"tab-personal\">\n        <form id=\"profile\" [formGroup]=\"profileForm\" (ngSubmit)=\"profileSubmit()\">\n          <mat-form-field>\n            <mat-label>CPF</mat-label>\n            <input matInput type=\"text\" formControlName=\"uniqueId\" id=\"uniqueId\" placeholder=\"Apenas números\" required autocomplete=\"new-password\">\n          </mat-form-field>\n          <mat-form-field>\n            <mat-label>Nome</mat-label><input matInput type=\"text\" formControlName=\"name\" id=\"name\"\n              placeholder=\"Nome completo\" required autocomplete=\"new-password\">\n          </mat-form-field>\n\n          <mat-form-field>\n            <mat-label>Aniversário</mat-label>\n            <input matInput [matDatepicker]=\"picker1\" formControlName=\"birthday\" [(ngModel)]=\"profile.birthday\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker1\"></mat-datepicker-toggle>\n            <mat-datepicker #picker1></mat-datepicker>\n          </mat-form-field>\n          \n          <mat-form-field>\n            <mat-label>Gênero</mat-label>\n            <mat-select formControlName=\"gender\">\n              <mat-option *ngFor=\"let genderItem of genderSelectObject\" [value]=\"genderItem.value\">\n                {{genderItem.valueView}}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </form>\n      </mat-tab>\n      <mat-tab label=\"Contatos\" id=\"tab-contact\">\n        <form id=\"profile\" [formGroup]=\"profileForm\" (ngSubmit)=\"profileSubmit()\">\n          <ng-container formArrayName=\"contacts\">\n            <mat-card *ngFor=\"let _ of contacts.controls; index as i\">\n              <ng-container [formGroupName]=\"i\">\n                <mat-card-header>Contato {{1 + i}}</mat-card-header>\n                <mat-card-content>\n                  <mat-form-field>\n                    <mat-label>Identificador</mat-label><input matInput type=\"text\" formControlName=\"contactId\"\n                      id=\"contactId\" placeholder=\"Nome identificando o contato\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Tipo de contato</mat-label>\n                    <mat-select formControlName=\"contactType\">\n                      <mat-option *ngFor=\"let contactTypeItem of contactTypeSelectObject\"\n                        [value]=\"contactTypeItem.value\">{{contactTypeItem.valueView}}</mat-option>\n                    </mat-select>\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Valor</mat-label><input matInput type=\"text\" formControlName=\"value\" id=\"value\"\n                      placeholder=\"Valor correspondente ao contato\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Complemento</mat-label><input matInput type=\"text\" formControlName=\"contactComplement\"\n                      id=\"contactComplement\" placeholder=\"Informação adicional do contato\" required\n                      autocomplete=\"new-password\">\n                  </mat-form-field>\n                </mat-card-content>\n                <mat-card-actions><button mat-button type=\"button\" color=\"warn\" (click)=\"removeContacts(i)\">Remover\n                    contato</button></mat-card-actions>\n              </ng-container>\n            </mat-card>\n          </ng-container>\n          <mat-card>\n            <mat-card-content><button mat-button type=\"button\" (click)=addContacts()>Adicionar contato</button>\n            </mat-card-content>\n          </mat-card>\n        </form>\n      </mat-tab>\n      <mat-tab label=\"Endereços\" id=\"tab-address\">\n        <form id=\"profile\" [formGroup]=\"profileForm\" (ngSubmit)=\"profileSubmit()\">\n          <ng-container formArrayName=\"addresses\">\n            <mat-card *ngFor=\"let _ of addresses.controls; index as i\">\n              <ng-container [formGroupName]=\"i\">\n                <mat-card-header>Endereço {{1 + i}}</mat-card-header>\n                <mat-card-content>\n                  <mat-form-field>\n                    <mat-label>CEP</mat-label><input matInput type=\"text\" formControlName=\"postalCode\" id=\"postalCode\"\n                      placeholder=\"Código postal do seu endereço\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Identificador</mat-label><input matInput type=\"text\" formControlName=\"addressId\"\n                      id=\"addressId\" placeholder=\"Um apelido para este endereço\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Logradouro</mat-label><input matInput type=\"text\" formControlName=\"address\" id=\"address\"\n                      placeholder=\"Nome da Rua, Avenida, Travessa, etc.\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Número</mat-label><input matInput type=\"text\" formControlName=\"number\" id=\"number\"\n                      placeholder=\"Código postal do seu endereço\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Bairro</mat-label><input matInput type=\"text\" formControlName=\"district\" id=\"district\"\n                      placeholder=\"Código postal do seu endereço\" required autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Complemento</mat-label><input matInput type=\"text\" formControlName=\"addressComplement\"\n                      id=\"addressComplement\" placeholder=\"Mais informações que ajudem a achar o seu endereço\"\n                      autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>País</mat-label><input matInput type=\"text\" formControlName=\"country\" id=\"country\"\n                      placeholder=\"País em que fica seu endereço\" autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Estado</mat-label><input matInput type=\"text\" formControlName=\"state\" id=\"state\"\n                      placeholder=\"Estado em que fica seu endereço\" autocomplete=\"new-password\">\n                  </mat-form-field>\n                  <mat-form-field>\n                    <mat-label>Cidade</mat-label><input matInput type=\"text\" formControlName=\"city\" id=\"city\"\n                      placeholder=\"Município em que fica seu endereço\" autocomplete=\"new-password\">\n                  </mat-form-field>\n                </mat-card-content>\n                <mat-card-actions><button mat-button type=\"button\" color=\"warn\" (click)=\"removeAddresses(i)\">Remover\n                    endereço</button></mat-card-actions>\n              </ng-container>\n            </mat-card>\n          </ng-container>\n          <mat-card>\n            <mat-card-content><button mat-button type=\"button\" (click)=addAddresses()>Adicionar endereço</button>\n            </mat-card-content>\n          </mat-card>\n        </form>\n      </mat-tab>\n    </mat-tab-group>\n  </mat-card-content>\n  <mat-card-actions>\n    <form id=\"profile\" [formGroup]=\"profileForm\" (ngSubmit)=\"profileSubmit()\"><button mat-raised-button\n        color=\"primary\">CRIAR</button></form>\n  </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "RecoverPasswordComponent",
            "id": "component-RecoverPasswordComponent-c52be43feb8f8b4bda111901fc3b4d90a0ba8b0dd7e4d4c11c47600ffb4fd0aaa3b316c151afbcdedb5da1e9b2d8b191244e2fee0ea94ee17f8ad339a0c1639c",
            "file": "src/app/components/recover-password/recover-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recover-password",
            "styleUrls": [
                "./recover-password.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./recover-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "recoverPasswordForm",
                    "defaultValue": "new FormGroup({\n    'email': new FormControl(null, [Validators.required, Validators.email, ]),\n    'repeatEmail': new FormControl(null, [Validators.required, Validators.email, ])\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "recoverPasswordSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component\n} from '@angular/core';\nimport {\n  FormControl,\n  FormGroup,\n  Validators\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-recover-password',\n  templateUrl: './recover-password.component.html',\n  styleUrls: ['./recover-password.component.sass']\n})\nexport class RecoverPasswordComponent {\n  recoverPasswordForm = new FormGroup({\n    'email': new FormControl(null, [Validators.required, Validators.email, ]),\n    'repeatEmail': new FormControl(null, [Validators.required, Validators.email, ])\n  });\n  recoverPasswordSubmit = () => {\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-card\n    width: 300px\n\n.header-image\n    background-image: url('../../../assets/img/logo-m.png')\n    background-size: cover\n",
                    "styleUrl": "./recover-password.component.sass"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"centralized\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"header-image\"></div>\n    <mat-card-title>Esqueci a senha</mat-card-title>\n    <mat-card-subtitle>Recupere sua senha.</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <form id=\"recoverPassword\" [formGroup]=\"recoverPasswordForm\" (ngSubmit)=\"recoverPasswordSubmit()\"\n      class=\"flex-column\">\n      <mat-form-field>\n        <mat-label>E-mail</mat-label><input matInput type=\"email\" formControlName=\"email\" id=\"email\"\n          placeholder=\"E-mail do usuário que esqueceu a senha\" required ngModel autocomplete=\"new-password\">\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Repetir e-mail</mat-label><input matInput type=\"email\" formControlName=\"repeatEmail\" id=\"repeatEmail\"\n          placeholder=\"Repetir e-mail do usuário\" required ngModel autocomplete=\"new-password\">\n      </mat-form-field><button mat-raised-button color=\"primary\" [routerLink]=\"['/change-password']\"\n        routerLinkActive=\"router-link-active\">ENVIAR</button>\n    </form>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button [routerLink]=\"['/']\" routerLinkActive=\"router-link-active\">Login</button>\n  </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "RemoveConfirmationDialogComponent",
            "id": "component-RemoveConfirmationDialogComponent-0ca8a88053a04fbecfea5ee9326b9bcec079af605c4407e67bb1fc7b32e8eb33623ad22dcb6cf1d288296f9b6d6c4b6faf1877cf4c63c051956fa48cbe86c013",
            "file": "src/app/components/remove-confirmation-dialog/remove-confirmation-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-remove-confirmation-dialog",
            "styleUrls": [
                "./remove-confirmation-dialog.component.sass"
            ],
            "styles": [],
            "templateUrl": [
                "./remove-confirmation-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RemoveConfirmationDialogDialogData",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "this.removeConfirmationDialogRoute.snapshot.params['id']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isAddModule",
                    "defaultValue": "!this.id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "removeConfirmationDialogDialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<RemoveConfirmationDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeConfirmationDialogForm",
                    "defaultValue": "this.removeConfirmationDialogFormBuilder.group({})",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "removeConfirmationDialogSubmit",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "setForm",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "RemoveConfirmationDialogOnNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component, Inject\n} from '@angular/core';\nimport {\n  FormArray,\n  FormBuilder,\n  FormGroup,\n  Validators\n} from '@angular/forms';\nimport {\n  ActivatedRoute,\n  Router\n} from '@angular/router';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from '@angular/material/dialog';\nexport interface RemoveConfirmationDialogDialogData {\n    teste: string,\n    teste2: string,\n}\n@Component({\n  selector: 'app-remove-confirmation-dialog',\n  templateUrl: './remove-confirmation-dialog.component.html',\n  styleUrls: ['./remove-confirmation-dialog.component.sass']\n}) export class RemoveConfirmationDialogComponent {\n  id: string = this.removeConfirmationDialogRoute.snapshot.params['id'];\n  isAddModule: boolean = !this.id;\n  constructor(\n    private removeConfirmationDialogFormBuilder: FormBuilder, \n    private removeConfirmationDialogRoute: ActivatedRoute, \n    private removeConfirmationDialogRouter: Router, \n    public removeConfirmationDialogDialogRef: MatDialogRef<RemoveConfirmationDialogComponent>, \n    @Inject(MAT_DIALOG_DATA) public data: RemoveConfirmationDialogDialogData) {\n    this.setForm();\n  };\n  removeConfirmationDialogForm = this.removeConfirmationDialogFormBuilder.group({});\n  setForm = () => {\n    if (!this.isAddModule) {\n      /** TO-DO */ /** Service this.userService.getById(this.id).pipe(first()).subscribe(x => this.form.patchValue(x));*/\n    }\n  }\n  removeConfirmationDialogSubmit = () => {\n    fetch('$ENV$/acl', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n      body: JSON.stringify(this.removeConfirmationDialogForm.value),\n    }).then((data) => {\n      data.json().then((keys) => {})\n    });\n  }\n  RemoveConfirmationDialogOnNoClick(): void {\n    this.removeConfirmationDialogDialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./remove-confirmation-dialog.component.sass"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "removeConfirmationDialogFormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "removeConfirmationDialogRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "removeConfirmationDialogRouter",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "removeConfirmationDialogDialogRef",
                        "type": "MatDialogRef<RemoveConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "RemoveConfirmationDialogDialogData",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "removeConfirmationDialogFormBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "removeConfirmationDialogRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "removeConfirmationDialogRouter",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "removeConfirmationDialogDialogRef",
                        "type": "MatDialogRef<RemoveConfirmationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "RemoveConfirmationDialogDialogData",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1 mat-dialog-title>Confirmar ação de remoção</h1>\n<div>Os ítens apagados não poderão ser recuperados diretamente pelo sistema</div>\n<div mat-dialog-content></div>\n<div mat-dialog-actions>\n  <form id=\"remove-confirmation-dialog\" [formGroup]=\"removeConfirmationDialogForm\"\n    (ngSubmit)=\"removeConfirmationDialogSubmit()\"><button mat-raised-button color=\"warn\"\n      mat-dialog-close>REMOVER</button></form>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ea96bba15111cc0b119a926f49211913c0a78460111579ee3c95ee60ac8388578f4957b4cc5137bf888b127784b892f6559f6726b1f6e1fba60db5f2bd2498cc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\n\n/** My modules */\nimport { SharedModule } from './modules/shared/shared.module';\n\n/** Utils */\nimport { MyErrorHandler } from '../utils/error-handler';\n\n/** Components */\nimport { AppComponent } from './app.component';\nimport { LogoutConfirmationDialogComponent } from './components/logout-confirmation-dialog/logout-confirmation-dialog.component';\nimport { RemoveConfirmationDialogComponent } from './components/remove-confirmation-dialog/remove-confirmation-dialog.component';\nimport { AuthenticationGuard } from './guards/authentication.guard';\n\n/**\n * Pipes\n */\nimport { ObjectArrayToStringPipe } from './pipes/object-array-to-string.pipe';\nimport { LopinhoButtonComponent } from './components/lopinho-button/lopinho-button.component';\nimport { LopinhoAutocompleteComponent } from './components/lopinho-autocomplete/lopinho-autocomplete.component';\nimport { LopinhoCheckboxComponent } from './components/lopinho-checkbox/lopinho-checkbox.component';\nimport { LopinhoDatepickerComponent } from './components/lopinho-datepicker/lopinho-datepicker.component';\nimport { LopinhoFormComponent } from './components/lopinho-form/lopinho-form.component';\nimport { LopinhoSelectComponent } from './components/lopinho-select/lopinho-select.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LogoutConfirmationDialogComponent,\n    RemoveConfirmationDialogComponent,\n    ObjectArrayToStringPipe,\n    LopinhoButtonComponent,\n    LopinhoAutocompleteComponent,\n    LopinhoCheckboxComponent,\n    LopinhoDatepickerComponent,\n    LopinhoFormComponent,\n    LopinhoSelectComponent,\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    SharedModule\n  ],\n  providers: [\n    AuthenticationGuard,\n    MyErrorHandler\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LogoutConfirmationDialogComponent"
                        },
                        {
                            "name": "LopinhoAutocompleteComponent"
                        },
                        {
                            "name": "LopinhoButtonComponent"
                        },
                        {
                            "name": "LopinhoCheckboxComponent"
                        },
                        {
                            "name": "LopinhoDatepickerComponent"
                        },
                        {
                            "name": "LopinhoFormComponent"
                        },
                        {
                            "name": "LopinhoSelectComponent"
                        },
                        {
                            "name": "ObjectArrayToStringPipe"
                        },
                        {
                            "name": "RemoveConfirmationDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5284abcbf1a48d3bd76f407611e8107295f2d3752c7faa85f6cc0e405e27dd65b4ee3d9c17cca8e1b6c907b9a59e08f802075bb8a169be32409a97672f5f3456",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import {\n  NgModule\n} from '@angular/core';\nimport {\n  RouterModule,\n  Routes\n} from '@angular/router';\nimport { LopinhoAutocompleteComponent } from './components/lopinho-autocomplete/lopinho-autocomplete.component';\nimport { AuthenticationGuard } from './guards/authentication.guard';\n\n//Modules\n\nconst routes: Routes = [{\n    path: 'main',\n    // canActivate: [AuthenticationGuard],\n    loadChildren: () => \"import('./modules/main/main.module').then(m => m.MainModule)\"\n  },\n  {\n    path: '',\n    redirectTo: '',\n    pathMatch: 'full'\n  },\n  {\n    path: '',\n    loadChildren: () => \"import('./modules/auth/auth.module').then(m => m.AuthModule)\"\n  },\n  {\n    path: 'lopinho-autocomplete',\n    component: LopinhoAutocompleteComponent\n  },\n  {\n    path: '**',\n    redirectTo: ''\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-1a0a7dc206d47a3bc5a65019d59472117a4f182acb99f1f5a2c0d68b46d4ab4b43086410c4c94c6f876daf85385b1d170c104e4b5b5e54fc030fd27081fdbb85",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// My modules\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n// My components\nimport { AuthComponent } from './auth.component';\nimport { ChangePasswordComponent } from '../../components/change-password/change-password.component';\nimport { LoginComponent } from '../../components/login/login.component';\nimport { RecoverPasswordComponent } from '../../components/recover-password/recover-password.component';\n\n@NgModule({\n  declarations: [\n    AuthComponent,\n    LoginComponent,\n    RecoverPasswordComponent,\n    ChangePasswordComponent,\n  ],\n  imports: [\n    SharedModule,\n    AuthRoutingModule,\n  ]\n})\nexport class AuthModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        },
                        {
                            "name": "ChangePasswordComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RecoverPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-6d71f8adbe6d267d8dce6ea4813e54c0e4b819f04eb583a23e12b01c1121672265262314cdf0c191288d7bc995d7c422c581ee74b85f80128b0b5ffe9af1cdb9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import {\n  NgModule\n} from '@angular/core';\nimport {\n  RouterModule,\n  Routes\n} from '@angular/router';\n\n//Components\nimport {\n  ChangePasswordComponent\n} from '../../components/change-password/change-password.component';\nimport {\n  LoginComponent\n} from '../../components/login/login.component';\nimport {\n  RecoverPasswordComponent\n} from '../../components/recover-password/recover-password.component';\nimport {\n  AuthComponent\n} from './auth.component';\n\nconst routes: Routes = [{\n    path: '',\n    component: AuthComponent,\n    children: [{\n        path: 'login',\n        component: LoginComponent\n      },\n      {\n        path: 'recover-password',\n        component: RecoverPasswordComponent\n      },\n      {\n        path: 'change-password',\n        component: ChangePasswordComponent\n      },\n      {\n        path: '',\n        redirectTo: 'login',\n        pathMatch: 'full'\n      },\n    ]\n  },\n  {\n    path: '**',\n    redirectTo: 'login',\n    pathMatch: 'full'\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AuthRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainModule",
            "id": "module-MainModule-f9ca899996a9080cb9d45bc0e78d12e1315915e9767670378b043bcacda5d4655c863e9706816f921f48808162176e4b1c6ad76510652a785b507c00e65404be",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/main/main.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { MainRoutingModule } from './main-routing.module';\nimport { SharedModule } from '../shared/shared.module';\n\n/** Components */\nimport { MainComponent } from './main.component';\nimport { ProfileComponent } from 'src/app/components/profile/profile.component';\nimport { DashboardComponent } from 'src/app/components/dashboard/dashboard.component';\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\n\n\n@NgModule({\n  declarations: [\n    MainComponent,\n    ProfileComponent,\n    DashboardComponent,\n  ],\n  imports: [\n    CommonModule,\n    MainRoutingModule,\n    SharedModule,\n  ],\n  providers: [\n    {\n      provide: MAT_DATE_LOCALE, useValue: 'en-GB'\n    }\n  ]\n})\nexport class MainModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "MainComponent"
                        },
                        {
                            "name": "ProfileComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MainRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MainRoutingModule",
            "id": "module-MainRoutingModule-d950d120fd0431069a730289ff8762d15ef7fee651625acb643f767829410a0bf79854e09947cb7cbe98c7fcb626ef0eb164d0c0c0045b9ba04815d198ea308f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/main/main-routing.module.ts",
            "methods": [],
            "sourceCode": "import {\n  NgModule\n} from '@angular/core';\nimport {\n  RouterModule,\n  Routes\n} from '@angular/router';\nimport { LopinhoAutocompleteComponent } from 'src/app/components/lopinho-autocomplete/lopinho-autocomplete.component';\nimport { LopinhoDatepickerComponent } from 'src/app/components/lopinho-datepicker/lopinho-datepicker.component';\nimport { LopinhoSelectComponent } from 'src/app/components/lopinho-select/lopinho-select.component';\n\n/** Components */\nimport {\n  DashboardComponent\n} from '../../components/dashboard/dashboard.component';\nimport {\n  ProfileComponent\n} from '../../components/profile/profile.component';\nimport {\n  MainComponent\n} from './main.component';\n\nconst routes: Routes = [{\n    path: '',\n    component: MainComponent,\n    children: [\n      {\n        path: 'dashboard',\n        component: DashboardComponent\n      },\n      {\n        path: 'profile',\n        component: ProfileComponent\n      },\n      {\n        path: 'autocomplete',\n        component: LopinhoAutocompleteComponent\n      },\n      {\n        path: 'datepicker',\n        component: LopinhoDatepickerComponent\n      },\n      {\n        path: 'select',\n        component: LopinhoSelectComponent\n      },\n      {\n        path: '',\n        redirectTo: 'dashboard',\n        pathMatch: 'full'\n      },\n    ]\n  },\n  {\n    path: '**',\n    redirectTo: '',\n    pathMatch: 'full'\n  },\n];\n\nconst acl = localStorage.getItem('user_data');\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class MainRoutingModule {}\n\n/**\n * TO-DO\n * GUARD OVER PATH\n */\n\n// const buildMenuOverAcl = (acl: any) => {\n//   const aclObject = JSON.parse(acl);\n//   const array = aclObject.acl.permissions;\n//   const routeArray = [];\n\n//   for (let i = 0; i < array.length; i++) {\n//     const element = array[i];\n//     routeArray.push({\n//       path: element.moduleId.menu.route,\n//       component: `${element.moduleId.name}Component`\n//     })\n//   }\n// }\n\n// buildMenuOverAcl(acl);\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-6804a0ceabb3eb76dd75ef939810b15bd5cbe688faee09544d86168492b58da818756de4e1890fb0ac58c901d38d7ecb31a5f87b863f7701c4df850f68ee1ea8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/shared/material.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ], \n  imports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class MaterialModule {}\n\n\n/**  Copyright 2021 Google LLC. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-699abf20c1e819200b6f0ff2c750856705bea18cc6be5406fd8d7eb99cb71ec8d0ea3084295046fc3b524392d8906f59461dbe19ab7db88c03cd351823993e37",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n  ],\n  providers: []\n})\nexport class SharedModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "acl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/main/main-routing.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "localStorage.getItem('user_data')"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrl: 'https://fundamento-api-kcu5nl2bea-uc.a.run.app',\n  mock: false,\n  projectId: '60a156941a332bacb40d72c7'\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/my-autocomplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    label: 'Autocomplete',\n    primary: true,\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/my-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/my-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    label: 'Checkbox',\n    primary: true,\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/my-datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/my-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/my-select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/modules/main/main-routing.module.ts": [
                {
                    "name": "acl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/main/main-routing.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "localStorage.getItem('user_data')"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrl: 'https://fundamento-api-kcu5nl2bea-uc.a.run.app',\n  mock: false,\n  projectId: '60a156941a332bacb40d72c7'\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/my-autocomplete.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/my-autocomplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    label: 'Autocomplete',\n    primary: true,\n  },\n})"
                }
            ],
            "src/stories/my-button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/my-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
                }
            ],
            "src/stories/my-checkbox.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/my-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    label: 'Checkbox',\n    primary: true,\n  },\n})"
                }
            ],
            "src/stories/my-datepicker.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/my-datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
                }
            ],
            "src/stories/my-form.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/my-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
                }
            ],
            "src/stories/my-select.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/my-select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  props: {\n    primary: true,\n  },\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "main",
                        "loadChildren": "./modules/main/main.module#MainModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/main/main-routing.module.ts",
                                        "module": "MainRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MainComponent",
                                                "children": [
                                                    {
                                                        "path": "dashboard",
                                                        "component": "DashboardComponent"
                                                    },
                                                    {
                                                        "path": "profile",
                                                        "component": "ProfileComponent"
                                                    },
                                                    {
                                                        "path": "autocomplete",
                                                        "component": "LopinhoAutocompleteComponent"
                                                    },
                                                    {
                                                        "path": "datepicker",
                                                        "component": "LopinhoDatepickerComponent"
                                                    },
                                                    {
                                                        "path": "select",
                                                        "component": "LopinhoSelectComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "dashboard",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": "**",
                                                "redirectTo": "",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MainModule"
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "",
                        "pathMatch": "full"
                    },
                    {
                        "path": "",
                        "loadChildren": "./modules/auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/modules/auth/auth-routing.module.ts",
                                        "module": "AuthRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "AuthComponent",
                                                "children": [
                                                    {
                                                        "path": "login",
                                                        "component": "LoginComponent"
                                                    },
                                                    {
                                                        "path": "recover-password",
                                                        "component": "RecoverPasswordComponent"
                                                    },
                                                    {
                                                        "path": "change-password",
                                                        "component": "ChangePasswordComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "login",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            },
                                            {
                                                "path": "**",
                                                "redirectTo": "login",
                                                "pathMatch": "full"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AuthModule"
                            }
                        ]
                    },
                    {
                        "path": "lopinho-autocomplete",
                        "component": "LopinhoAutocompleteComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/change-password/change-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChangePasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/logout-confirmation-dialog/logout-confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/logout-confirmation-dialog/logout-confirmation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-autocomplete/lopinho-autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LopinhoAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-button/lopinho-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LopinhoButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-checkbox/lopinho-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LopinhoCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-datepicker/lopinho-datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LopinhoDatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-form/lopinho-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LopinhoFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-select/lopinho-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LopinhoSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/lopinho-select/lopinho-select.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Food",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/profile/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileFormService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/recover-password/recover-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecoverPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/remove-confirmation-dialog/remove-confirmation-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoveConfirmationDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/remove-confirmation-dialog/remove-confirmation-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RemoveConfirmationDialogDialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/login.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DecodedToken",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/login.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/login.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interfaces/user.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/main/main-routing.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "acl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/main/main.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/object-array-to-string.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ObjectArrayToStringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/my-autocomplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/my-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/my-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/my-datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/my-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/my-select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/utils/error-handler.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MyErrorHandler",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            }
        ]
    }
}